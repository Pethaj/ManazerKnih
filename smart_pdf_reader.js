    // NOV√Å INTELIGENTN√ç FUNKCE PRO ƒåTEN√ç PDF S DETEKC√ç OCR
    async getFileContent(filePath: string): Promise<string> {
        if (!filePath) return "Soubor pro tuto knihu nebyl nalezen.";
        
        try {
            const { data, error } = await supabaseClient.storage.from('Books').download(filePath);
            if (error) {
                console.error('Error downloading file content:', error.message, error);
                throw error;
            }
            
            if (!data) {
                return "Nepoda≈ôilo se naƒç√≠st obsah souboru: soubor je pr√°zdn√Ω.";
            }

            // Detekce typu souboru
            const fileExtension = filePath.toLowerCase().split('.').pop();
            
            if (fileExtension === 'pdf') {
                console.log('üîç Detekov√°n PDF soubor - spou≈°t√≠m inteligentn√≠ anal√Ωzu...');
                return await this.extractPdfTextContent(data);
            } else {
                // Pro ostatn√≠ form√°ty pou≈æijeme standardn√≠ text()
                return await data.text();
            }
            
        } catch (e: any) {
            console.error("Failed to read file content:", e.message, e);
            return `Nepoda≈ôilo se zpracovat obsah souboru: ${e.message}`;
        }
    },

    // NOV√Å FUNKCE PRO INTELIGENTN√ç EXTRAKCI TEXTU Z PDF
    async extractPdfTextContent(fileData: Blob): Promise<string> {
        try {
            const arrayBuffer = await fileData.arrayBuffer();
            const loadingTask = pdfjsLib.getDocument(arrayBuffer);
            const pdf = await loadingTask.promise;
            
            console.log(`üìÑ PDF m√° ${pdf.numPages} str√°nek`);
            
            // Omez√≠me na prvn√≠ch 50 str√°nek
            const maxPages = Math.min(pdf.numPages, 50);
            let extractedText = '';
            let hasTextContent = false;
            
            // Pokus√≠me se extrahovat text z prvn√≠ch nƒõkolika str√°nek
            for (let pageNum = 1; pageNum <= Math.min(5, maxPages); pageNum++) {
                const page = await pdf.getPage(pageNum);
                const textContent = await page.getTextContent();
                
                const pageText = textContent.items
                    .filter(item => 'str' in item)
                    .map(item => (item as any).str)
                    .join(' ')
                    .trim();
                
                if (pageText.length > 100) { // Pokud str√°nka obsahuje alespo≈à 100 znak≈Ø textu
                    hasTextContent = true;
                    break;
                }
            }
            
            if (hasTextContent) {
                console.log('‚úÖ PDF obsahuje OCR text - extrahuji text...');
                
                // Extrahujeme text ze v≈°ech str√°nek (max 50)
                for (let pageNum = 1; pageNum <= maxPages; pageNum++) {
                    const page = await pdf.getPage(pageNum);
                    const textContent = await page.getTextContent();
                    
                    const pageText = textContent.items
                        .filter(item => 'str' in item)
                        .map(item => (item as any).str)
                        .join(' ')
                        .trim();
                    
                    if (pageText) {
                        extractedText += `\n\nStr√°nka ${pageNum}:\n${pageText}`;
                    }
                    
                    // Omezen√≠ na 150 000 znak≈Ø (50 str√°nek)
                    if (extractedText.length > 150000) {
                        extractedText = extractedText.substring(0, 150000) + '...';
                        console.log('üìù Text zkr√°cen na 150 000 znak≈Ø (50 str√°nek)');
                        break;
                    }
                }
                
                if (extractedText.trim().length > 500) {
                    console.log(`‚úÖ √öspƒõ≈°nƒõ extrahov√°n OCR text: ${extractedText.length} znak≈Ø`);
                    return extractedText.trim();
                }
            }
            
            // Pokud PDF nem√° OCR text, vr√°t√≠me informaci o struktu≈ôe
            console.log('‚ö†Ô∏è PDF neobsahuje ƒçiteln√Ω text (chyb√≠ OCR) - vrac√≠m struktur√°ln√≠ informace');
            
            const metadata = await pdf.getMetadata();
            const info = metadata.info;
            
            let structuralInfo = `PDF dokument bez OCR vrstvy.\n\n`;
            structuralInfo += `Poƒçet str√°nek: ${pdf.numPages}\n`;
            structuralInfo += `N√°zev: ${info?.Title || 'Nezn√°m√Ω'}\n`;
            structuralInfo += `Autor: ${info?.Author || 'Nezn√°m√Ω'}\n`;
            structuralInfo += `Vytvo≈ôeno: ${info?.CreationDate || 'Nezn√°m√©'}\n`;
            structuralInfo += `Aplikace: ${info?.Creator || 'Nezn√°m√°'}\n\n`;
            structuralInfo += `POZN√ÅMKA: Tento PDF soubor neobsahuje prohled√°vateln√Ω text. `;
            structuralInfo += `Pro anal√Ωzu obsahu by bylo pot≈ôeba pou≈æ√≠t OCR (optick√© rozpozn√°v√°n√≠ znak≈Ø).`;
            
            return structuralInfo;
            
        } catch (error) {
            console.error('‚ùå Chyba p≈ôi zpracov√°n√≠ PDF:', error);
            return `Nepoda≈ôilo se zpracovat PDF soubor: ${error}`;
        }
    },
